/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package dev.blachut.svelte.lang.parsing.html;

import com.intellij.lang.javascript.JSTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;
import dev.blachut.svelte.lang.psi.SvelteTokenTypes;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SvelteHtmlLexer.flex</tt>
 */
public class _SvelteHtmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOC_TYPE = 2;
  public static final int COMMENT = 4;
  public static final int START_TAG_NAME = 6;
  public static final int END_TAG_NAME = 8;
  public static final int BEFORE_TAG_ATTRIBUTES = 10;
  public static final int TAG_ATTRIBUTES = 12;
  public static final int ATTRIBUTE_BRACES = 14;
  public static final int ATTRIBUTE_VALUE_START = 16;
  public static final int ATTRIBUTE_VALUE_BRACES = 18;
  public static final int ATTRIBUTE_VALUE_AFTER_BRACES = 20;
  public static final int ATTRIBUTE_VALUE_DQ = 22;
  public static final int ATTRIBUTE_VALUE_DQ_BRACES = 24;
  public static final int ATTRIBUTE_VALUE_SQ = 26;
  public static final int ATTRIBUTE_VALUE_SQ_BRACES = 28;
  public static final int PROCESSING_INSTRUCTION = 30;
  public static final int TAG_CHARACTERS = 32;
  public static final int C_COMMENT_START = 34;
  public static final int C_COMMENT_END = 36;
  public static final int SVELTE_INTERPOLATION_START = 38;
  public static final int SVELTE_INTERPOLATION_KEYWORD = 40;
  public static final int SVELTE_INTERPOLATION = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  7,  7,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14,
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19,  7, 7
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1"+
    "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5"+
    "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1"+
    "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1"+
    "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13"+
    "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1"+
    "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170"+
    "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2"+
    "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1"+
    "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150"+
    "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2"+
    "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123"+
    "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207"+
    "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40"+
    "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46"+
    "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202"+
    "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13"+
    "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13"+
    "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1"+
    "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40"+
    "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27"+
    "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40"+
    "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4"+
    "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1"+
    "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110"+
    "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250"+
    "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1"+
    "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256"+
    "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55"+
    "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1"+
    "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1"+
    "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1"+
    "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75"+
    "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265"+
    "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1"+
    "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1"+
    "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277"+
    "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13"+
    "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\16\1\4\2\16\22\0\1\16\1\21\1\6\1\63\1\61\1\0\1\54\1\5\2\53\3\0\1\14"+
    "\1\13\1\56\12\2\1\12\1\72\1\20\1\17\1\52\1\55\1\64\1\76\1\46\1\25\1\22\1\34"+
    "\1\76\1\1\1\36\1\50\2\1\1\42\1\40\1\1\1\23\1\32\3\1\1\27\1\44\2\1\1\75\1\31"+
    "\1\1\1\57\1\10\1\60\1\0\1\11\1\7\1\67\1\47\1\26\1\22\1\35\1\65\1\73\1\37\1"+
    "\51\2\1\1\43\1\41\1\71\1\24\1\33\1\74\1\1\1\66\1\30\1\45\1\1\1\70\1\75\1\31"+
    "\1\1\1\15\1\53\1\62\7\0\1\3\12\0\1\4\11\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1"+
    "\0\12\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1"+
    "\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0\1"+
    "\1\6\0\10\1\10\0\13\1\5\0\3\1\33\0\6\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2"+
    "\0\2\1\1\0\16\1\15\0\11\1\13\0\1\1\30\0\6\1\4\0\2\1\4\0\1\1\5\0\6\1\4\0\1"+
    "\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0\5\1\1\0\10\1\6\0\26\1\3\0\1\1\2\0\1\1\7\0"+
    "\11\1\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15"+
    "\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\3"+
    "\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1\1\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10"+
    "\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1"+
    "\3\0\3\1\3\0\14\1\13\0\10\1\1\0\2\1\10\0\3\1\5\0\1\1\4\0\10\1\1\0\6\1\1\0"+
    "\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0\1\1\6\0\3\1\10\0\1\1\5\0\22\1\3\0\10\1"+
    "\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1\0\2\1\15\0\2\1\1\0\1\1\2\0\2\1\1\0\1"+
    "\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1"+
    "\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14\1\1\0\24\1\13\0\5\1\22\0\7\1\4\0\4\1\3\0"+
    "\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1"+
    "\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1"+
    "\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1\4\17\1\1\0\10\1\7\0\15\1\1\0\6"+
    "\1\23\0\1\1\4\0\1\1\3\0\5\1\2\0\22\1\1\0\1\1\5\0\17\1\1\0\16\1\2\0\5\1\13"+
    "\0\14\1\13\0\1\1\15\0\7\1\7\0\16\1\15\0\2\1\11\0\4\1\1\0\4\1\3\0\2\1\11\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0"+
    "\4\1\2\0\6\1\4\0\13\4\15\0\2\3\5\0\1\4\17\0\1\4\1\0\1\1\15\0\1\1\2\0\1\1\4"+
    "\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2"+
    "\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1\13\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1"+
    "\1\0\7\1\1\0\1\4\4\0\2\1\12\0\5\1\5\0\2\1\3\0\7\1\6\0\3\1\12\0\2\1\13\0\11"+
    "\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1\0\4\1\2\0\6\1\3\0\1\1\1\0\1\1\2\0\5"+
    "\1\1\0\12\1\12\0\5\1\1\0\3\1\1\0\10\1\4\0\7\1\3\0\1\1\3\0\2\1\1\0\1\1\3\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\3\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\4\0"+
    "\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12\1\6\0"+
    "\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1"+
    "\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1"+
    "\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0\1\1\12\0\4\1\25\0\1\1\1\0\1\1\3\0"+
    "\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2\1\14\0\3\1\7\0\4\1\11\0\2\1\1\0\1\1\20"+
    "\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1"+
    "\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1\1\0\4\1\1\0\5\1\1\0\1"+
    "\1\3\0\14\1\2\0\10\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1"+
    "\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1"+
    "\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\15\0\1\2\5\0\1\1\1\3\1\1\1\4"+
    "\1\3\3\1\1\5\1\6\1\7\4\6\1\10\1\6"+
    "\3\11\1\12\1\11\1\13\1\14\1\15\1\16\2\14"+
    "\1\17\1\20\1\14\1\21\1\7\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\24\1\30\1\24\1\31\1\32"+
    "\1\7\1\33\1\34\1\35\4\32\1\36\1\37\1\36"+
    "\1\40\1\36\1\41\1\2\1\42\1\6\3\43\1\44"+
    "\1\11\3\44\1\45\1\46\1\47\1\50\1\46\1\51"+
    "\1\52\1\53\5\46\1\54\1\0\1\55\1\56\14\0"+
    "\1\56\1\57\1\60\2\32\2\0\1\61\4\0\1\62"+
    "\3\0\1\63\1\64\12\0\1\65\1\0\1\66\5\0"+
    "\1\67\1\0\1\70\3\0\1\21\1\71\1\6\1\0"+
    "\1\72\1\73\1\74\3\0\1\75\1\76\1\0\1\77"+
    "\2\0\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u05a9\0\u05a9\0\u05a9\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u05a9\0\u0666\0\u05a9\0\u07e0\0\u081f"+
    "\0\u05a9\0\u0666\0\u05a9\0\u05a9\0\u085e\0\u05a9\0\u0666\0\u089d"+
    "\0\u08dc\0\u05a9\0\u091b\0\u095a\0\u0999\0\u05a9\0\u05a9\0\u05a9"+
    "\0\u05a9\0\u05a9\0\u05a9\0\u09d8\0\u05a9\0\u0666\0\u05a9\0\u0a17"+
    "\0\u0a56\0\u05a9\0\u05a9\0\u05a9\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u05a9\0\u05a9\0\u0b91\0\u05a9\0\u0666\0\u05a9\0\u0bd0\0\u05a9"+
    "\0\u0c0f\0\u05a9\0\u0666\0\u091b\0\u05a9\0\u0c4e\0\u0c8d\0\u0666"+
    "\0\u0ccc\0\u05a9\0\u05a9\0\u0d0b\0\u05a9\0\u0666\0\u05a9\0\u05a9"+
    "\0\u05a9\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u05a9\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u06e4\0\u0723\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u05a9\0\u05a9"+
    "\0\u05a9\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u05a9\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u05a9\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u05a9"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u05a9\0\u1722\0\u05a9\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u05a9\0\u189c\0\u05a9\0\u18db\0\u191a\0\u1959"+
    "\0\u05a9\0\u05a9\0\u1998\0\u19d7\0\u05a9\0\u05a9\0\u05a9\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u05a9\0\u05a9\0\u1ad3\0\u05a9\0\u1b12\0\u1b51"+
    "\0\u05a9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\25\1\26\4\25\1\27\4\25\1\30\1\31\1\25"+
    "\1\32\33\25\1\33\4\25\1\34\1\35\1\34\13\25"+
    "\3\36\1\37\1\36\1\40\1\41\7\36\1\37\13\36"+
    "\2\42\2\36\2\43\12\36\1\44\1\36\1\45\22\36"+
    "\14\46\1\47\3\46\1\50\31\46\1\51\1\46\1\52"+
    "\2\46\1\53\17\46\1\54\1\55\1\54\1\37\5\54"+
    "\2\55\3\54\1\37\1\54\1\56\1\54\30\55\2\54"+
    "\1\57\10\54\5\55\1\54\4\55\1\54\1\55\1\54"+
    "\1\37\5\54\2\55\3\54\1\37\1\54\1\60\1\54"+
    "\30\55\2\54\1\57\10\54\5\55\1\54\4\55\3\54"+
    "\1\61\12\54\1\61\33\54\1\62\1\54\1\57\1\54"+
    "\1\63\20\54\3\64\1\65\1\64\2\54\6\64\1\66"+
    "\1\37\1\67\1\54\31\64\1\62\3\64\1\63\20\64"+
    "\5\70\1\71\1\72\1\73\1\74\4\70\1\75\36\70"+
    "\1\76\5\70\1\77\14\70\3\100\1\101\1\100\1\102"+
    "\1\103\6\100\1\104\1\37\33\100\1\62\3\100\1\105"+
    "\20\100\3\106\1\107\1\106\2\36\6\106\1\104\1\61"+
    "\33\106\1\62\3\106\1\110\20\106\6\111\1\112\1\111"+
    "\1\113\4\111\1\114\36\111\1\115\22\111\5\70\1\71"+
    "\1\112\1\73\1\74\4\70\1\75\36\70\1\76\5\70"+
    "\1\77\14\70\5\111\1\112\2\111\1\113\4\111\1\116"+
    "\36\111\1\115\22\111\5\70\1\112\1\72\1\73\1\74"+
    "\4\70\1\75\36\70\1\76\5\70\1\77\14\70\52\117"+
    "\1\120\2\117\1\121\21\117\3\122\1\37\12\122\1\37"+
    "\1\122\1\56\31\122\1\62\1\122\1\123\1\122\1\124"+
    "\20\122\1\125\1\126\12\125\1\127\5\125\30\126\2\125"+
    "\1\130\3\125\1\131\4\125\5\126\1\125\4\126\1\125"+
    "\1\126\12\125\1\127\5\125\30\126\2\125\1\130\3\125"+
    "\1\132\4\125\5\126\1\125\4\126\3\133\2\134\5\133"+
    "\1\135\3\133\1\134\35\133\1\136\1\133\1\137\4\133"+
    "\1\140\1\141\15\133\2\134\11\133\1\134\7\133\1\142"+
    "\1\133\1\143\4\133\1\144\13\133\1\145\2\133\1\136"+
    "\12\133\1\146\7\133\10\25\1\27\4\25\2\0\1\25"+
    "\1\0\33\25\1\0\4\25\3\0\16\25\1\26\4\25"+
    "\1\27\4\25\1\0\1\31\1\25\1\0\33\25\1\0"+
    "\4\25\3\0\23\25\1\27\4\25\2\0\1\25\1\0"+
    "\33\25\1\0\5\25\1\0\14\25\102\0\1\31\12\0"+
    "\1\31\61\0\1\147\7\0\2\147\6\0\1\150\30\147"+
    "\3\0\1\151\1\152\6\0\5\147\1\0\4\147\1\0"+
    "\1\153\7\0\2\153\7\0\21\153\1\154\6\153\11\0"+
    "\1\155\1\0\2\153\1\156\1\153\1\157\1\0\1\154"+
    "\1\160\2\153\3\0\1\37\12\0\1\37\60\0\5\161"+
    "\1\111\71\161\6\162\1\111\70\162\44\0\2\163\60\0"+
    "\2\164\62\0\1\165\103\0\1\166\56\0\2\55\6\0"+
    "\4\55\5\0\30\55\13\0\5\55\1\0\4\55\56\0"+
    "\1\167\23\0\1\61\12\0\1\61\132\0\1\170\24\0"+
    "\5\64\2\0\7\64\3\0\31\64\1\0\3\64\1\0"+
    "\23\64\1\65\1\64\2\0\7\64\1\37\2\0\31\64"+
    "\1\0\3\64\1\0\20\64\5\0\3\70\67\0\15\100"+
    "\1\171\1\0\33\100\1\0\3\100\1\172\23\100\1\101"+
    "\11\100\1\171\1\37\33\100\1\0\3\100\1\172\35\100"+
    "\1\171\1\0\33\100\1\170\3\100\1\172\20\100\5\106"+
    "\2\0\6\106\1\171\1\0\33\106\1\0\3\106\1\173"+
    "\23\106\1\107\1\106\2\0\6\106\1\171\1\61\33\106"+
    "\1\0\3\106\1\173\72\106\1\170\3\106\1\173\20\106"+
    "\61\0\1\111\15\0\52\117\1\0\2\117\1\174\73\117"+
    "\1\120\24\117\1\0\3\126\7\0\1\126\2\0\1\126"+
    "\2\0\31\126\1\0\2\126\10\0\5\126\1\0\4\126"+
    "\14\0\1\175\134\0\1\176\27\0\2\134\11\0\1\134"+
    "\147\0\1\177\46\0\1\200\102\0\1\201\23\0\1\202"+
    "\74\0\1\203\101\0\1\204\7\0\2\147\6\0\4\147"+
    "\5\0\30\147\13\0\5\147\1\0\4\147\14\0\1\205"+
    "\5\0\1\206\55\0\1\207\7\0\2\207\7\0\30\207"+
    "\13\0\5\207\1\0\4\207\1\0\2\153\6\0\4\153"+
    "\5\0\30\153\13\0\5\153\1\210\4\153\1\0\2\153"+
    "\6\0\4\153\5\0\6\153\1\211\21\153\13\0\5\153"+
    "\1\210\4\153\2\0\1\212\72\0\1\213\2\0\2\153"+
    "\6\0\4\153\5\0\11\153\1\214\5\153\1\215\10\153"+
    "\13\0\5\153\1\210\4\153\1\0\2\153\6\0\4\153"+
    "\5\0\25\153\1\216\2\153\13\0\5\153\1\210\4\153"+
    "\1\0\2\153\6\0\4\153\5\0\23\153\1\217\4\153"+
    "\13\0\5\153\1\210\4\153\46\0\2\220\67\0\2\221"+
    "\56\0\1\222\30\0\1\223\40\0\1\224\42\0\1\225"+
    "\17\0\52\100\1\0\3\100\1\172\20\100\52\106\1\0"+
    "\3\106\1\173\20\106\52\117\1\0\24\117\52\0\1\223"+
    "\54\0\1\226\103\0\1\227\127\0\1\230\36\0\1\231"+
    "\137\0\1\232\23\0\1\233\105\0\2\234\53\0\2\207"+
    "\6\0\4\207\5\0\30\207\13\0\5\207\1\0\4\207"+
    "\1\0\2\153\6\0\4\153\5\0\30\153\13\0\5\153"+
    "\1\235\4\153\2\0\1\212\67\0\1\235\6\0\1\236"+
    "\17\0\1\236\2\0\2\236\5\0\2\236\10\0\2\236"+
    "\15\0\1\236\1\0\1\236\6\0\1\236\1\0\2\153"+
    "\6\0\4\153\5\0\2\153\1\237\25\153\13\0\5\153"+
    "\1\210\4\153\1\0\2\153\6\0\4\153\5\0\11\153"+
    "\1\211\16\153\13\0\5\153\1\210\4\153\1\0\2\153"+
    "\6\0\4\153\5\0\30\153\13\0\1\153\1\215\3\153"+
    "\1\210\4\153\1\0\2\153\6\0\4\153\5\0\2\153"+
    "\1\154\25\153\13\0\5\153\1\210\4\153\42\0\2\240"+
    "\75\0\2\241\105\0\1\242\40\0\1\243\110\0\1\244"+
    "\141\0\1\245\42\0\1\246\100\0\1\247\110\0\1\250"+
    "\52\0\2\251\52\0\1\236\17\0\1\236\2\0\2\236"+
    "\5\0\2\236\10\0\2\236\15\0\1\236\1\0\1\236"+
    "\2\0\1\235\3\0\1\236\1\0\2\153\6\0\4\153"+
    "\5\0\30\153\13\0\1\153\1\211\3\153\1\210\4\153"+
    "\50\0\2\252\41\0\1\222\35\0\1\223\63\0\1\253"+
    "\67\0\1\254\75\0\2\255\73\0\2\256\101\0\1\257"+
    "\77\0\2\260\77\0\2\261\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\15\0\1\1\5\0\3\1\1\11\3\1\3\11"+
    "\5\1\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\1\11\3\1\1\11\3\1\6\11\1\1\1\11"+
    "\1\1\1\11\2\1\3\11\4\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\4\1\2\11\1\1\1\11\1\1\3\11\6\1\1\0"+
    "\1\11\1\1\14\0\3\11\2\1\2\0\1\11\4\0"+
    "\1\11\3\0\1\1\1\11\12\0\1\11\1\0\1\11"+
    "\5\0\1\11\1\0\1\11\3\0\2\11\1\1\1\0"+
    "\3\11\3\0\2\11\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static int NO_QUOTE = 0;
  private static int SINGLE_QUOTE = 1;
  private static int DOUBLE_QUOTE = 2;
  private static int BACKQUOTE = 3;

  public int bracesNestingLevel = 0;
  public int quoteMode = NO_QUOTE;

  public _SvelteHtmlLexer() {
    this((java.io.Reader)null);
  }

  private void yybeginNestable(int state) {
      bracesNestingLevel = 0;
      quoteMode = NO_QUOTE;
      yybegin(state);
  }

  private void toggleQuoteMode(int mode) {
    if (quoteMode == NO_QUOTE) {
      quoteMode = mode;
    } else if (quoteMode == mode) {
      quoteMode = NO_QUOTE;
    }
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SvelteHtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      bracesNestingLevel = 0;
  quoteMode = NO_QUOTE;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return XmlTokenType.XML_DATA_CHARACTERS;
            }
            // fall through
          case 65: break;
          case 2:
            { return XmlTokenType.XML_PI_TARGET;
            }
            // fall through
          case 66: break;
          case 3:
            { return XmlTokenType.XML_REAL_WHITE_SPACE;
            }
            // fall through
          case 67: break;
          case 4:
            { yybeginNestable(SVELTE_INTERPOLATION_START); return SvelteTokenTypes.START_MUSTACHE;
            }
            // fall through
          case 68: break;
          case 5:
            { return SvelteTokenTypes.END_MUSTACHE;
            }
            // fall through
          case 69: break;
          case 6:
            { return XmlTokenType.XML_BAD_CHARACTER;
            }
            // fall through
          case 70: break;
          case 7:
            { return XmlTokenType.XML_WHITE_SPACE;
            }
            // fall through
          case 71: break;
          case 8:
            { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
            }
            // fall through
          case 72: break;
          case 9:
            { return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 73: break;
          case 10:
            { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
  // comments should start with <!-- and end with -->. The comment <!--> is not valid, but should terminate
  // comment token. Please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
  int loc = getTokenStart();
  char prev = zzBuffer.charAt(loc - 1);
  char prevPrev = zzBuffer.charAt(loc - 2);
  if (prev == '-' && prevPrev == '-') {
    yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
  }
  return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 74: break;
          case 11:
            { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
            }
            // fall through
          case 75: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(1); break;
            }
            // fall through
          case 76: break;
          case 13:
            { yybegin(BEFORE_TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
            }
            // fall through
          case 77: break;
          case 14:
            { return XmlTokenType.XML_START_TAG_START;
            }
            // fall through
          case 78: break;
          case 15:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_WHITE_SPACE;
            }
            // fall through
          case 79: break;
          case 16:
            { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
            }
            // fall through
          case 80: break;
          case 17:
            { return XmlTokenType.XML_NAME;
            }
            // fall through
          case 81: break;
          case 18:
            { yybeginNestable(ATTRIBUTE_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
            // fall through
          case 82: break;
          case 19:
            { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
            }
            // fall through
          case 83: break;
          case 20:
            { return SvelteTokenTypes.CODE_FRAGMENT;
            }
            // fall through
          case 84: break;
          case 21:
            { toggleQuoteMode(SINGLE_QUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            }
            // fall through
          case 85: break;
          case 22:
            { toggleQuoteMode(DOUBLE_QUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            }
            // fall through
          case 86: break;
          case 23:
            { toggleQuoteMode(BACKQUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            }
            // fall through
          case 87: break;
          case 24:
            { if (quoteMode == NO_QUOTE) { bracesNestingLevel++; } return SvelteTokenTypes.CODE_FRAGMENT;
            }
            // fall through
          case 88: break;
          case 25:
            { if (quoteMode != NO_QUOTE) { return SvelteTokenTypes.CODE_FRAGMENT; }
          if (bracesNestingLevel > 0) { bracesNestingLevel--; return SvelteTokenTypes.CODE_FRAGMENT; }

          if (yystate() == SVELTE_INTERPOLATION) yybegin(YYINITIAL);
          if (yystate() == ATTRIBUTE_BRACES) yybegin(TAG_ATTRIBUTES);
          if (yystate() == ATTRIBUTE_VALUE_BRACES) yybegin(ATTRIBUTE_VALUE_AFTER_BRACES);
          if (yystate() == ATTRIBUTE_VALUE_DQ_BRACES) yybegin(ATTRIBUTE_VALUE_DQ);
          if (yystate() == ATTRIBUTE_VALUE_SQ_BRACES) yybegin(ATTRIBUTE_VALUE_SQ);
          return SvelteTokenTypes.END_MUSTACHE;
            }
            // fall through
          case 89: break;
          case 26:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
            // fall through
          case 90: break;
          case 27:
            { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
            // fall through
          case 91: break;
          case 28:
            { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
            // fall through
          case 92: break;
          case 29:
            { yybeginNestable(ATTRIBUTE_VALUE_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
            // fall through
          case 93: break;
          case 30:
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
            // fall through
          case 94: break;
          case 31:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
            // fall through
          case 95: break;
          case 32:
            { yybeginNestable(ATTRIBUTE_VALUE_DQ_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
            // fall through
          case 96: break;
          case 33:
            { yybeginNestable(ATTRIBUTE_VALUE_SQ_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
            // fall through
          case 97: break;
          case 34:
            { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
            }
            // fall through
          case 98: break;
          case 35:
            { return XmlTokenType.XML_TAG_CHARACTERS;
            }
            // fall through
          case 99: break;
          case 36:
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 100: break;
          case 37:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
            }
            // fall through
          case 101: break;
          case 38:
            { yybegin(SVELTE_INTERPOLATION); yypushback(yylength());
            }
            // fall through
          case 102: break;
          case 39:
            { return TokenType.WHITE_SPACE;
            }
            // fall through
          case 103: break;
          case 40:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.COLON;
            }
            // fall through
          case 104: break;
          case 41:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.DIV;
            }
            // fall through
          case 105: break;
          case 42:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.SHARP;
            }
            // fall through
          case 106: break;
          case 43:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.AT;
            }
            // fall through
          case 107: break;
          case 44:
            { yybegin(START_TAG_NAME); yypushback(yylength());
            }
            // fall through
          case 108: break;
          case 45:
            { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
            }
            // fall through
          case 109: break;
          case 46:
            { return XmlTokenType.XML_END_TAG_START;
            }
            // fall through
          case 110: break;
          case 47:
            { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
            }
            // fall through
          case 111: break;
          case 48:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
            // fall through
          case 112: break;
          case 49:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
            }
            // fall through
          case 113: break;
          case 50:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.IF_KEYWORD;
            }
            // fall through
          case 114: break;
          case 51:
            { yybegin(END_TAG_NAME); yypushback(yylength());
            }
            // fall through
          case 115: break;
          case 52:
            { return XmlTokenType.XML_ENTITY_REF_TOKEN;
            }
            // fall through
          case 116: break;
          case 53:
            { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
            }
            // fall through
          case 117: break;
          case 54:
            { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
            }
            // fall through
          case 118: break;
          case 55:
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
            }
            // fall through
          case 119: break;
          case 56:
            { return XmlTokenType.XML_CHAR_ENTITY_REF;
            }
            // fall through
          case 120: break;
          case 57:
            { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
            }
            // fall through
          case 121: break;
          case 58:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.THEN_KEYWORD;
            }
            // fall through
          case 122: break;
          case 59:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.ELSE_KEYWORD;
            }
            // fall through
          case 123: break;
          case 60:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.EACH_KEYWORD;
            }
            // fall through
          case 124: break;
          case 61:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.CATCH_KEYWORD;
            }
            // fall through
          case 125: break;
          case 62:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.AWAIT_KEYWORD;
            }
            // fall through
          case 126: break;
          case 63:
            { return XmlTokenType.XML_DOCTYPE_PUBLIC;
            }
            // fall through
          case 127: break;
          case 64:
            { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
            }
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
